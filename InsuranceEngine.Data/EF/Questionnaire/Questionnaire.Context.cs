//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace InsuranceEngine.Data.EF.Questionnaire
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class QuestionnaireEntities : DbContext
    {
        public QuestionnaireEntities()
            : base("name=QuestionnaireEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Question> Questions { get; set; }
        public virtual DbSet<Question_Template> Question_Template { get; set; }
        public virtual DbSet<Quote> Quotes { get; set; }
        public virtual DbSet<Quote_Question_Answer> Quote_Question_Answer { get; set; }
        public virtual DbSet<Scheme> Schemes { get; set; }
        public virtual DbSet<Rendered_Page> Rendered_Page { get; set; }
        public virtual DbSet<Page> Pages { get; set; }
        public virtual DbSet<Page_Template> Page_Template { get; set; }
        public virtual DbSet<Question_Possible_Answer> Question_Possible_Answer { get; set; }
        public virtual DbSet<Page_Question> Page_Question { get; set; }
        public virtual DbSet<Page_Question_Conditional_Display> Page_Question_Conditional_Display { get; set; }
        public virtual DbSet<Validation_Type> Validation_Type { get; set; }
        public virtual DbSet<Page_Question_Validation> Page_Question_Validation { get; set; }
        public virtual DbSet<Question_Type> Question_Type { get; set; }
    
        public virtual ObjectResult<Pages_ListPagesForGrid_Result> Pages_ListPagesForGrid(Nullable<int> schemeID, string whereClause, string orderClause, Nullable<int> pageSize, Nullable<int> currentPageIndex)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderClauseParameter = orderClause != null ?
                new ObjectParameter("OrderClause", orderClause) :
                new ObjectParameter("OrderClause", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Pages_ListPagesForGrid_Result>("Pages_ListPagesForGrid", schemeIDParameter, whereClauseParameter, orderClauseParameter, pageSizeParameter, currentPageIndexParameter);
        }
    
        public virtual ObjectResult<Questions_ListQuestionsForGrid_Result> Questions_ListQuestionsForGrid(Nullable<int> schemeID, string whereClause, string orderClause, Nullable<int> pageSize, Nullable<int> currentPageIndex)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderClauseParameter = orderClause != null ?
                new ObjectParameter("OrderClause", orderClause) :
                new ObjectParameter("OrderClause", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Questions_ListQuestionsForGrid_Result>("Questions_ListQuestionsForGrid", schemeIDParameter, whereClauseParameter, orderClauseParameter, pageSizeParameter, currentPageIndexParameter);
        }
    
        public virtual ObjectResult<RenderedPages_ListRenderedPagesForGrid_Result> RenderedPages_ListRenderedPagesForGrid(Nullable<int> schemeID, string whereClause, string orderClause, Nullable<int> pageSize, Nullable<int> currentPageIndex)
        {
            var schemeIDParameter = schemeID.HasValue ?
                new ObjectParameter("SchemeID", schemeID) :
                new ObjectParameter("SchemeID", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderClauseParameter = orderClause != null ?
                new ObjectParameter("OrderClause", orderClause) :
                new ObjectParameter("OrderClause", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RenderedPages_ListRenderedPagesForGrid_Result>("RenderedPages_ListRenderedPagesForGrid", schemeIDParameter, whereClauseParameter, orderClauseParameter, pageSizeParameter, currentPageIndexParameter);
        }
    
        public virtual ObjectResult<PageQuestions_ListPageQuestionsForGrid_Result> PageQuestions_ListPageQuestionsForGrid(Nullable<int> pageID, string whereClause, string orderClause, Nullable<int> pageSize, Nullable<int> currentPageIndex)
        {
            var pageIDParameter = pageID.HasValue ?
                new ObjectParameter("PageID", pageID) :
                new ObjectParameter("PageID", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderClauseParameter = orderClause != null ?
                new ObjectParameter("OrderClause", orderClause) :
                new ObjectParameter("OrderClause", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PageQuestions_ListPageQuestionsForGrid_Result>("PageQuestions_ListPageQuestionsForGrid", pageIDParameter, whereClauseParameter, orderClauseParameter, pageSizeParameter, currentPageIndexParameter);
        }
    
        public virtual ObjectResult<PageQuestions_ListPageQuestionValidationForGrid_Result> PageQuestions_ListPageQuestionValidationForGrid(Nullable<int> pageQuestionID, string whereClause, string orderClause, Nullable<int> pageSize, Nullable<int> currentPageIndex)
        {
            var pageQuestionIDParameter = pageQuestionID.HasValue ?
                new ObjectParameter("PageQuestionID", pageQuestionID) :
                new ObjectParameter("PageQuestionID", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderClauseParameter = orderClause != null ?
                new ObjectParameter("OrderClause", orderClause) :
                new ObjectParameter("OrderClause", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PageQuestions_ListPageQuestionValidationForGrid_Result>("PageQuestions_ListPageQuestionValidationForGrid", pageQuestionIDParameter, whereClauseParameter, orderClauseParameter, pageSizeParameter, currentPageIndexParameter);
        }
    
        public virtual ObjectResult<PageQuestions_ListPageQuestionDisplayConditionsForGrid_Result> PageQuestions_ListPageQuestionDisplayConditionsForGrid(Nullable<int> pageQuestionID, string whereClause, string orderClause, Nullable<int> pageSize, Nullable<int> currentPageIndex)
        {
            var pageQuestionIDParameter = pageQuestionID.HasValue ?
                new ObjectParameter("PageQuestionID", pageQuestionID) :
                new ObjectParameter("PageQuestionID", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderClauseParameter = orderClause != null ?
                new ObjectParameter("OrderClause", orderClause) :
                new ObjectParameter("OrderClause", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<PageQuestions_ListPageQuestionDisplayConditionsForGrid_Result>("PageQuestions_ListPageQuestionDisplayConditionsForGrid", pageQuestionIDParameter, whereClauseParameter, orderClauseParameter, pageSizeParameter, currentPageIndexParameter);
        }
    
        public virtual ObjectResult<Questions_ListPossibleAnswerForGrid_Result> Questions_ListPossibleAnswerForGrid(Nullable<int> questionID, string whereClause, string orderClause, Nullable<int> pageSize, Nullable<int> currentPageIndex)
        {
            var questionIDParameter = questionID.HasValue ?
                new ObjectParameter("QuestionID", questionID) :
                new ObjectParameter("QuestionID", typeof(int));
    
            var whereClauseParameter = whereClause != null ?
                new ObjectParameter("WhereClause", whereClause) :
                new ObjectParameter("WhereClause", typeof(string));
    
            var orderClauseParameter = orderClause != null ?
                new ObjectParameter("OrderClause", orderClause) :
                new ObjectParameter("OrderClause", typeof(string));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            var currentPageIndexParameter = currentPageIndex.HasValue ?
                new ObjectParameter("CurrentPageIndex", currentPageIndex) :
                new ObjectParameter("CurrentPageIndex", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Questions_ListPossibleAnswerForGrid_Result>("Questions_ListPossibleAnswerForGrid", questionIDParameter, whereClauseParameter, orderClauseParameter, pageSizeParameter, currentPageIndexParameter);
        }
    }
}
