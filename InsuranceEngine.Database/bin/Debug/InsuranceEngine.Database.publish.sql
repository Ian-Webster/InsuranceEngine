/*
Deployment script for InsuranceEngine_PublishTest

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "InsuranceEngine_PublishTest"
:setvar DefaultFilePrefix "InsuranceEngine_PublishTest"
:setvar DefaultDataPath "E:\Work\SQL\AttachedDBs\Data\"
:setvar DefaultLogPath "E:\Work\SQL\AttachedDBs\Data\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET ANSI_NULLS ON,
                ANSI_PADDING ON,
                ANSI_WARNINGS ON,
                ARITHABORT ON,
                CONCAT_NULL_YIELDS_NULL ON,
                QUOTED_IDENTIFIER ON,
                ANSI_NULL_DEFAULT ON,
                CURSOR_DEFAULT LOCAL,
                RECOVERY FULL 
            WITH ROLLBACK IMMEDIATE;
    END


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET PAGE_VERIFY NONE 
            WITH ROLLBACK IMMEDIATE;
    END


GO
ALTER DATABASE [$(DatabaseName)]
    SET TARGET_RECOVERY_TIME = 0 SECONDS 
    WITH ROLLBACK IMMEDIATE;


GO
IF EXISTS (SELECT 1
           FROM   [master].[dbo].[sysdatabases]
           WHERE  [name] = N'$(DatabaseName)')
    BEGIN
        ALTER DATABASE [$(DatabaseName)]
            SET QUERY_STORE (CLEANUP_POLICY = (STALE_QUERY_THRESHOLD_DAYS = 367)) 
            WITH ROLLBACK IMMEDIATE;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Creating [dbo].[Page]...';


GO
CREATE TABLE [dbo].[Page] (
    [Page_ID]          INT           IDENTITY (1, 1) NOT NULL,
    [Page_Template_ID] INT           NOT NULL,
    [Scheme_ID]        INT           NOT NULL,
    [Title]            NVARCHAR (50) NOT NULL,
    [Name]             NVARCHAR (50) NOT NULL,
    [DisplayOrder]     INT           NOT NULL,
    [Next_Page_ID]     INT           NULL,
    CONSTRAINT [PK_Page] PRIMARY KEY CLUSTERED ([Page_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Page_Question]...';


GO
CREATE TABLE [dbo].[Page_Question] (
    [Page_Question_ID] INT            IDENTITY (1, 1) NOT NULL,
    [Page_ID]          INT            NOT NULL,
    [Question_ID]      INT            NOT NULL,
    [DisplayOrder]     INT            NOT NULL,
    [QuestionText]     NVARCHAR (250) NOT NULL,
    [QuestionName]     NVARCHAR (50)  NOT NULL,
    [DefaultShow]      BIT            NOT NULL,
    CONSTRAINT [PK_Page_Question] PRIMARY KEY CLUSTERED ([Page_Question_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Page_Question_Conditional_Display]...';


GO
CREATE TABLE [dbo].[Page_Question_Conditional_Display] (
    [Page_Question_Conditional_Display_ID] INT IDENTITY (1, 1) NOT NULL,
    [Source_Page_Question_ID]              INT NOT NULL,
    [Target_Page_Question_ID]              INT NOT NULL,
    [Trigger_Question_Possible_Answer_ID]  INT NOT NULL,
    [Hide]                                 BIT NOT NULL,
    CONSTRAINT [PK_Page_Question_Conditional_Display] PRIMARY KEY CLUSTERED ([Page_Question_Conditional_Display_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Page_Question_Validation]...';


GO
CREATE TABLE [dbo].[Page_Question_Validation] (
    [Page_Question_Validation_ID] INT             IDENTITY (1, 1) NOT NULL,
    [Page_Question_ID]            INT             NOT NULL,
    [Validation_Type_ID]          INT             NOT NULL,
    [ErrorMessage]                NVARCHAR (1024) NOT NULL,
    [ValidationExpression]        NVARCHAR (MAX)  NULL,
    CONSTRAINT [PK_Page_Question_Validation] PRIMARY KEY CLUSTERED ([Page_Question_Validation_ID] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Page_Template]...';


GO
CREATE TABLE [dbo].[Page_Template] (
    [Page_Template_ID] INT            IDENTITY (1, 1) NOT NULL,
    [Name]             NVARCHAR (100) NOT NULL,
    [TemplateContent]  NVARCHAR (MAX) NOT NULL,
    CONSTRAINT [PK_Page_Template] PRIMARY KEY CLUSTERED ([Page_Template_ID] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Question]...';


GO
CREATE TABLE [dbo].[Question] (
    [Question_ID]          INT            IDENTITY (1, 1) NOT NULL,
    [Scheme_ID]            INT            NOT NULL,
    [Question_Template_ID] INT            NOT NULL,
    [Name]                 NVARCHAR (100) NOT NULL,
    [Code]                 NVARCHAR (50)  NOT NULL,
    CONSTRAINT [PK_Question] PRIMARY KEY CLUSTERED ([Question_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Question_Possible_Answer]...';


GO
CREATE TABLE [dbo].[Question_Possible_Answer] (
    [Question_Possible_Answer_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Question_ID]                 INT           NOT NULL,
    [AnswerText]                  NVARCHAR (50) NOT NULL,
    [AnswerValue]                 NVARCHAR (20) NOT NULL,
    [DisplayOrder]                INT           NOT NULL,
    CONSTRAINT [PK_Question_Possible_Answer] PRIMARY KEY CLUSTERED ([Question_Possible_Answer_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Question_Template]...';


GO
CREATE TABLE [dbo].[Question_Template] (
    [Question_Template_ID] INT            IDENTITY (1, 1) NOT NULL,
    [Question_Type_ID]     INT            NOT NULL,
    [Name]                 NVARCHAR (50)  NOT NULL,
    [Template]             NVARCHAR (MAX) NOT NULL,
    [LastRenderDate]       DATETIME       NULL,
    CONSTRAINT [PK_Question_Template] PRIMARY KEY CLUSTERED ([Question_Template_ID] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Question_Type]...';


GO
CREATE TABLE [dbo].[Question_Type] (
    [Question_Type_ID]   INT           NOT NULL,
    [Name]               NVARCHAR (50) NOT NULL,
    [HasPossibleAnswers] BIT           NOT NULL,
    CONSTRAINT [PK_Question_Type] PRIMARY KEY CLUSTERED ([Question_Type_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Quote]...';


GO
CREATE TABLE [dbo].[Quote] (
    [Quote_ID]  INT           IDENTITY (1, 1) NOT NULL,
    [Scheme_ID] INT           NOT NULL,
    [Reference] NVARCHAR (50) NOT NULL,
    [QuoteDate] DATETIME      NOT NULL,
    CONSTRAINT [PK_Quote] PRIMARY KEY CLUSTERED ([Quote_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Quote_Question_Answer]...';


GO
CREATE TABLE [dbo].[Quote_Question_Answer] (
    [Quote_Question_Answer_ID]    INT            IDENTITY (1, 1) NOT NULL,
    [Quote_ID]                    INT            NOT NULL,
    [Question_ID]                 INT            NOT NULL,
    [Question_Possible_Answer_ID] INT            NULL,
    [Answer]                      NVARCHAR (100) NULL,
    CONSTRAINT [PK_Quote_Question_Answer] PRIMARY KEY CLUSTERED ([Quote_Question_Answer_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Rendered_Page]...';


GO
CREATE TABLE [dbo].[Rendered_Page] (
    [Rendered_Page_ID] INT            IDENTITY (1, 1) NOT NULL,
    [Page_ID]          INT            NOT NULL,
    [PageContent]      NVARCHAR (MAX) NOT NULL,
    [LastRenderDate]   DATETIME       NULL,
    CONSTRAINT [PK_Rendered_Page] PRIMARY KEY CLUSTERED ([Rendered_Page_ID] ASC) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Scheme]...';


GO
CREATE TABLE [dbo].[Scheme] (
    [Scheme_ID] INT           IDENTITY (1, 1) NOT NULL,
    [Name]      NVARCHAR (50) NOT NULL,
    [Code]      NVARCHAR (10) NOT NULL,
    CONSTRAINT [PK_Scheme] PRIMARY KEY CLUSTERED ([Scheme_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[Validation_Type]...';


GO
CREATE TABLE [dbo].[Validation_Type] (
    [Validation_Type_ID] INT            NOT NULL,
    [Name]               NVARCHAR (100) NOT NULL,
    [DataType]           NVARCHAR (100) NULL,
    CONSTRAINT [PK_Validation_Type] PRIMARY KEY CLUSTERED ([Validation_Type_ID] ASC) ON [PRIMARY]
) ON [PRIMARY];


GO
PRINT N'Creating [dbo].[FK_Page_Page]...';


GO
ALTER TABLE [dbo].[Page] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Page] FOREIGN KEY ([Next_Page_ID]) REFERENCES [dbo].[Page] ([Page_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Page_Template]...';


GO
ALTER TABLE [dbo].[Page] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Page_Template] FOREIGN KEY ([Page_Template_ID]) REFERENCES [dbo].[Page_Template] ([Page_Template_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Scheme]...';


GO
ALTER TABLE [dbo].[Page] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Scheme] FOREIGN KEY ([Scheme_ID]) REFERENCES [dbo].[Scheme] ([Scheme_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Question_Page]...';


GO
ALTER TABLE [dbo].[Page_Question] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Question_Page] FOREIGN KEY ([Page_ID]) REFERENCES [dbo].[Page] ([Page_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Question_Question]...';


GO
ALTER TABLE [dbo].[Page_Question] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Question_Question] FOREIGN KEY ([Question_ID]) REFERENCES [dbo].[Question] ([Question_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Question_Conditional_Display_Page_Question]...';


GO
ALTER TABLE [dbo].[Page_Question_Conditional_Display] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Question_Conditional_Display_Page_Question] FOREIGN KEY ([Source_Page_Question_ID]) REFERENCES [dbo].[Page_Question] ([Page_Question_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Question_Conditional_Display_Page_Question1]...';


GO
ALTER TABLE [dbo].[Page_Question_Conditional_Display] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Question_Conditional_Display_Page_Question1] FOREIGN KEY ([Target_Page_Question_ID]) REFERENCES [dbo].[Page_Question] ([Page_Question_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Question_Conditional_Display_Question_Possible_Answer]...';


GO
ALTER TABLE [dbo].[Page_Question_Conditional_Display] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Question_Conditional_Display_Question_Possible_Answer] FOREIGN KEY ([Trigger_Question_Possible_Answer_ID]) REFERENCES [dbo].[Question_Possible_Answer] ([Question_Possible_Answer_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Question_Validation_Page_Question]...';


GO
ALTER TABLE [dbo].[Page_Question_Validation] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Question_Validation_Page_Question] FOREIGN KEY ([Page_Question_ID]) REFERENCES [dbo].[Page_Question] ([Page_Question_ID]);


GO
PRINT N'Creating [dbo].[FK_Page_Question_Validation_Validation_Type]...';


GO
ALTER TABLE [dbo].[Page_Question_Validation] WITH NOCHECK
    ADD CONSTRAINT [FK_Page_Question_Validation_Validation_Type] FOREIGN KEY ([Validation_Type_ID]) REFERENCES [dbo].[Validation_Type] ([Validation_Type_ID]);


GO
PRINT N'Creating [dbo].[FK_Question_Question_Template]...';


GO
ALTER TABLE [dbo].[Question] WITH NOCHECK
    ADD CONSTRAINT [FK_Question_Question_Template] FOREIGN KEY ([Question_Template_ID]) REFERENCES [dbo].[Question_Template] ([Question_Template_ID]);


GO
PRINT N'Creating [dbo].[FK_Question_Scheme]...';


GO
ALTER TABLE [dbo].[Question] WITH NOCHECK
    ADD CONSTRAINT [FK_Question_Scheme] FOREIGN KEY ([Scheme_ID]) REFERENCES [dbo].[Scheme] ([Scheme_ID]);


GO
PRINT N'Creating [dbo].[FK_Question_Possible_Answer_Question]...';


GO
ALTER TABLE [dbo].[Question_Possible_Answer] WITH NOCHECK
    ADD CONSTRAINT [FK_Question_Possible_Answer_Question] FOREIGN KEY ([Question_ID]) REFERENCES [dbo].[Question] ([Question_ID]);


GO
PRINT N'Creating [dbo].[FK_Question_Template_Question_Type]...';


GO
ALTER TABLE [dbo].[Question_Template] WITH NOCHECK
    ADD CONSTRAINT [FK_Question_Template_Question_Type] FOREIGN KEY ([Question_Type_ID]) REFERENCES [dbo].[Question_Type] ([Question_Type_ID]);


GO
PRINT N'Creating [dbo].[FK_Quote_Scheme]...';


GO
ALTER TABLE [dbo].[Quote] WITH NOCHECK
    ADD CONSTRAINT [FK_Quote_Scheme] FOREIGN KEY ([Scheme_ID]) REFERENCES [dbo].[Scheme] ([Scheme_ID]);


GO
PRINT N'Creating [dbo].[FK_Quote_Question_Answer_Question]...';


GO
ALTER TABLE [dbo].[Quote_Question_Answer] WITH NOCHECK
    ADD CONSTRAINT [FK_Quote_Question_Answer_Question] FOREIGN KEY ([Question_ID]) REFERENCES [dbo].[Question] ([Question_ID]);


GO
PRINT N'Creating [dbo].[FK_Quote_Question_Answer_Question_Possible_Answer]...';


GO
ALTER TABLE [dbo].[Quote_Question_Answer] WITH NOCHECK
    ADD CONSTRAINT [FK_Quote_Question_Answer_Question_Possible_Answer] FOREIGN KEY ([Question_Possible_Answer_ID]) REFERENCES [dbo].[Question_Possible_Answer] ([Question_Possible_Answer_ID]);


GO
PRINT N'Creating [dbo].[FK_Quote_Question_Answer_Quote]...';


GO
ALTER TABLE [dbo].[Quote_Question_Answer] WITH NOCHECK
    ADD CONSTRAINT [FK_Quote_Question_Answer_Quote] FOREIGN KEY ([Quote_ID]) REFERENCES [dbo].[Quote] ([Quote_ID]);


GO
PRINT N'Creating [dbo].[FK_Rendered_Page_Page]...';


GO
ALTER TABLE [dbo].[Rendered_Page] WITH NOCHECK
    ADD CONSTRAINT [FK_Rendered_Page_Page] FOREIGN KEY ([Page_ID]) REFERENCES [dbo].[Page] ([Page_ID]);


GO
PRINT N'Creating [dbo].[SpaceUpper]...';


GO
CREATE Function [dbo].[SpaceUpper](@Original VarChar(1024))
Returns VarChar(8000)
As
Begin

  While PatIndex('%[^ ][A-Z]%', @Original Collate Latin1_General_Bin) > 0
    Set @Original = Replace(@Original Collate Latin1_General_Bin, SubString(@Original, 1+PatIndex('%[^ ][A-Z]%', @Original Collate Latin1_General_Bin), 1), ' '+ SubString(@Original, 1+PatIndex('%[^ ][A-Z]%', @Original Collate Latin1_General_Bin), 1))

  Return LTrim(@Original)
End
GO
PRINT N'Creating [dbo].[_dev_DTOToTableObjectSave]...';


GO
CREATE PROCEDURE [dbo].[_dev_DTOToTableObjectSave]
	@table_name SYSNAME
AS
SET NOCOUNT ON

DECLARE @temp TABLE (
	sort INT
	,code TEXT
	)


INSERT INTO @temp
SELECT 13
	,CHAR(9) + 'dao.' + COLUMN_NAME + ' = dto.' + replace(COLUMN_NAME, '_', '') + ';'
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = @table_name
ORDER BY ORDINAL_POSITION

SELECT code
FROM @temp
ORDER BY sort
GO
PRINT N'Creating [dbo].[_dev_TableToAutoMapperMappings]...';


GO
CREATE PROCEDURE [dbo].[_dev_TableToAutoMapperMappings] 
	@table_name SYSNAME
AS
SET NOCOUNT ON

DECLARE @temp TABLE (
	sort INT
	,code TEXT
	)

INSERT INTO @temp
SELECT  1
		,CHAR(9) + 'AutoMapper.Mapper.CreateMap<' + @table_name + ', ' + replace(@table_name, '_', '') + 'DTO>()'

INSERT INTO @temp
SELECT 2
	,CHAR(9) + CHAR(9) + '.ForMember(dest => dest.' + replace(COLUMN_NAME, '_', '')  + ', opt => opt.MapFrom(source => source.' + COLUMN_NAME + '))'
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = @table_name
AND replace(COLUMN_NAME, '_', '') <> COLUMN_NAME
ORDER BY ORDINAL_POSITION

SELECT code
FROM @temp
ORDER BY sort
GO
PRINT N'Creating [dbo].[_dev_TableToDTO]...';


GO
CREATE PROCEDURE [dbo].[_dev_TableToDTO] 
	@table_name SYSNAME
AS
SET NOCOUNT ON

DECLARE @temp TABLE (
	sort INT
	,code TEXT
	)

INSERT INTO @temp
SELECT 1
	,'[Serializable]'

INSERT INTO @temp
SELECT 1
	,'public class ' + replace(@table_name, '_', '') + 'DTO'

INSERT INTO @temp
SELECT 2
	,'{'


INSERT INTO @temp
SELECT 13
	,CHAR(9) + '[DataMember]' + CHAR(13) +
	CHAR(9) + '[Display (Name = "' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]' + CHAR(13) +
	CASE 
		WHEN DATA_TYPE LIKE '%CHAR%'
			THEN 	
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must enter the ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 
				CASE WHEN CHARACTER_MAXIMUM_LENGTH is not null
					THEN CHAR(9) + '[MaxLength('+ cast(CHARACTER_MAXIMUM_LENGTH as varchar(5))  +', ErrorMessage= "' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + ' cannot be longer than ' + cast(CHARACTER_MAXIMUM_LENGTH as varchar(5))  + ' characters")]'
						 + CASE WHEN CHARACTER_MAXIMUM_LENGTH > 50
							THEN + CHAR(13) + CHAR(9) + '[UIHint("MultilineText")]'
							ELSE ''
						END   
				END + CHAR(13) + 
					CHAR(9) + 'public ' + 'string '
		WHEN DATA_TYPE LIKE '%TEXT%'
			THEN 
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must enter the ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 
				CASE WHEN CHARACTER_MAXIMUM_LENGTH is not null
					THEN CHAR(9) + '[MaxLength('+ cast(CHARACTER_MAXIMUM_LENGTH as varchar(5))  +', ErrorMessage= "' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + ' cannot be longer than ' + cast(CHARACTER_MAXIMUM_LENGTH as varchar(5))  + ' characters")]'
				END + CHAR(13) + 
					CHAR(9) + 'public ' + 'string '
		WHEN DATA_TYPE LIKE '%TINYINT%'
			THEN 
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must enter the ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 			
				CHAR(9) + 'public ' + 'byte' + (
				CASE 
					WHEN IS_NULLABLE = 'YES'
						THEN '? '
					ELSE ' '
					END
				)			
		WHEN DATA_TYPE LIKE '%INT%'
			THEN 
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must enter the ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 
				CHAR(9) + 'public ' + 'int' + (
				CASE 
					WHEN IS_NULLABLE = 'YES'
						THEN '? '
					ELSE ' '
					END
				)
		WHEN DATA_TYPE LIKE '%DATETIME%'
			THEN 
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must select a date for ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 
				CHAR(9) + 'public ' + 'DateTime' + (
				CASE 
					WHEN IS_NULLABLE = 'YES'
						THEN '? '
					ELSE ' '
					END
				)
		WHEN DATA_TYPE LIKE '%DATE%'
			THEN
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must select a date for ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 
				 CHAR(9) + 'public ' + 'DateTime' + (
				CASE 
					WHEN IS_NULLABLE = 'YES'
						THEN '? '
					ELSE ' '
					END
				)
		WHEN DATA_TYPE LIKE '%BINARY%'
			THEN CHAR(9) + 'public ' + 'byte[]'
		WHEN DATA_TYPE = 'BIT'
			THEN 
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must select an answer for ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 			
				CHAR(9) + 'public ' + 'bool' + (
				CASE 
					WHEN IS_NULLABLE = 'YES'
						THEN '? '
					ELSE ' '
					END
				)
		WHEN DATA_TYPE LIKE '%DECIMAL%'
			THEN 
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must select enter the ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 				
				CHAR(9) + 'public ' + 'decimal' + (
				CASE 
					WHEN IS_NULLABLE = 'YES'
						THEN '? '
					ELSE ' '
					END
				)
		WHEN DATA_TYPE LIKE '%MONEY%'
			THEN 
				CASE WHEN IS_NULLABLE = 'NO'
					THEN  CHAR(9) + '[Required( ErrorMessage= "You must select enter the ' + dbo.SpaceUpper(replace(COLUMN_NAME, '_', ' ')) + '")]'
					ELSE ''
				END + CHAR(13) + 				
				CHAR(9) + 'public ' + 'decimal' + (
				CASE 
					WHEN IS_NULLABLE = 'YES'
						THEN '? '
					ELSE ' '
					END
				)					
		ELSE CHAR(9) + 'public ' + 'object '
		END + replace(COLUMN_NAME, '_', '') + ' { get; set; }'
FROM INFORMATION_SCHEMA.COLUMNS
WHERE TABLE_NAME = @table_name
ORDER BY ORDINAL_POSITION

INSERT INTO @temp
SELECT 16
	,CHAR(13) + CHAR(10) + '}'

SELECT code
FROM @temp
ORDER BY sort
GO
PRINT N'Creating [dbo].[PageQuestions_ListPageQuestionDisplayConditionsForGrid]...';


GO
CREATE PROCEDURE [dbo].[PageQuestions_ListPageQuestionDisplayConditionsForGrid] 
	@PageQuestionID INT,
	@WhereClause NVARCHAR(max),
	@OrderClause NVARCHAR(128),
	@PageSize INT,
	@CurrentPageIndex INT
AS
BEGIN

	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			CAST(null as int)	as PageQuestionConditionalDisplayID			
			,cast(null as nvarchar(50))   as SourcePageQuestionName
			,cast(null as nvarchar(50))   as TargetPageQuestionName
			,cast(null as nvarchar(50))   as TriggerAnswer
			,cast(null as bit)	as Hide
			,CAST(null as int)	as TotalRows
		WHERE
			1 = 2  
	END	

	IF OBJECT_ID('tempdb..#ResultSet') IS NOT NULL
			DROP TABLE #ResultSet

	IF OBJECT_ID('tempdb..#ResultSetIndexed') IS NOT NULL
		DROP TABLE #ResultSetIndexed

	CREATE TABLE #ResultSet (
		PageQuestionConditionalDisplayID INT			
		,SourcePageQuestionName nvarchar(50)
		,TargetPageQuestionName nvarchar(50)
		,TriggerAnswer nvarchar(50)
		,Hide bit
		,TotalRows INT
		)

	CREATE TABLE #ResultSetIndexed (
		ID INT IDENTITY(1, 1)
		,PageQuestionConditionalDisplayID INT			
		,SourcePageQuestionName nvarchar(50)
		,TargetPageQuestionName nvarchar(50)
		,TriggerAnswer nvarchar(50)
		,Hide bit
		,TotalRows INT
		)	
		
		
	/* get raw data */
	INSERT INTO #ResultSet (
					PageQuestionConditionalDisplayID	
					,SourcePageQuestionName
					,TargetPageQuestionName
					,TriggerAnswer
					,Hide
					,TotalRows
		)	
	SELECT distinct pqc.Page_Question_Conditional_Display_ID
		,sourceQuestion.QuestionName
		,targetQuestion.QuestionName
		,answer.AnswerText
		,pqc.Hide
		,0
	FROM Page_Question_Conditional_Display pqc
	JOIN Page_Question sourceQuestion on pqc.Source_Page_Question_ID = sourceQuestion.Page_Question_ID
	JOIN Page_Question targetQuestion on pqc.Target_Page_Question_ID = targetQuestion.Page_Question_ID
	JOIN Question_Possible_Answer answer on answer.Question_Possible_Answer_ID = pqc.Trigger_Question_Possible_Answer_ID
	WHERE pqc.Target_Page_Question_ID = @PageQuestionID
	ORDER BY sourceQuestion.QuestionName

	
	DECLARE @sql NVARCHAR(max)

	SET @sql = 'INSERT INTO #ResultSetIndexed
	(
		PageQuestionConditionalDisplayID	
		,SourcePageQuestionName
		,TargetPageQuestionName
		,TriggerAnswer
		,Hide
		,TotalRows
	) select * from #ResultSet'

	IF (@WhereClause <> '')
	BEGIN
		SET @sql = @sql + ' where ' + @WhereClause
	END
	
	IF (@OrderClause <> '')
	BEGIN
		SET @sql = @sql + ' order by ' + @OrderClause
	END

	EXEC (@sql)
	--print @sql

	/* sort out total row count */
	DECLARE @count INT

	SET @count = (
			SELECT COUNT(PageQuestionConditionalDisplayID)
			FROM #ResultSetIndexed
			)

	UPDATE #ResultSetIndexed
	SET TotalRows = @count

	declare @startIndex int
	declare @endIndex int

	IF (@CurrentPageIndex = 1)
	BEGIN
		
		set @startIndex = 0
		set @endIndex = @startIndex + @PageSize + 1
	END
	ELSE
	BEGIN
		set @startIndex = (@CurrentPageIndex-1) * @PageSize
		set @endIndex = @startIndex + @PageSize + 1 
	END

	SELECT 	PageQuestionConditionalDisplayID	
			,SourcePageQuestionName
			,TargetPageQuestionName
			,TriggerAnswer
			,Hide
			,TotalRows
	FROM #ResultSetIndexed
	WHERE ID > @startIndex 
	AND ID < @endIndex	



END
GO
PRINT N'Creating [dbo].[PageQuestions_ListPageQuestionsForGrid]...';


GO
create PROCEDURE [dbo].[PageQuestions_ListPageQuestionsForGrid] 
	@PageID INT,
	@WhereClause NVARCHAR(max),
	@OrderClause NVARCHAR(128),
	@PageSize INT,
	@CurrentPageIndex INT
AS
BEGIN

	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			CAST(null as int)	as PageQuestionID			
			,cast(null as nvarchar(50))   as Question
			,cast(null as nvarchar(250))   as QuestionText
			,cast(null as nvarchar(50))   as QuestionName
			,cast(null as int)   as DisplayOrder			
			,cast(null as bit)   as DefaultShow	
			,CAST(null as int)	as TotalRows
		WHERE
			1 = 2  
	END	

	IF OBJECT_ID('tempdb..#ResultSet') IS NOT NULL
			DROP TABLE #ResultSet

	IF OBJECT_ID('tempdb..#ResultSetIndexed') IS NOT NULL
		DROP TABLE #ResultSetIndexed

	CREATE TABLE #ResultSet (
		PageQuestionID INT			
		,Question nvarchar(50)
		,QuestionText nvarchar(250)
		,QuestionName nvarchar(50)
		,DisplayOrder int
		,DefaultShow bit
		,TotalRows INT
		)

	CREATE TABLE #ResultSetIndexed (
		ID INT IDENTITY(1, 1)
		,PageQuestionID INT			
		,Question nvarchar(50)
		,QuestionText nvarchar(250)
		,QuestionName nvarchar(50)
		,DisplayOrder int
		,DefaultShow bit
		,TotalRows INT
		)	
		
		
	/* get raw data */
	INSERT INTO #ResultSet (
					PageQuestionID	
					,Question
					,QuestionText
					,QuestionName
					,DisplayOrder
					,DefaultShow
					,TotalRows
		)	
	SELECT distinct pq.Page_Question_ID AS PageQuestionID
		,q.Name
		,pq.QuestionText
		,pq.QuestionName
		,pq.DisplayOrder
		,pq.DefaultShow
		,0
	FROM Page_Question pq
	JOIN Question q ON q.Question_ID = pq.Question_ID
	WHERE pq.Page_ID = @PageID
	ORDER BY pq.DisplayOrder

	
	DECLARE @sql NVARCHAR(max)

	SET @sql = 'INSERT INTO #ResultSetIndexed
	(
		PageQuestionID	
		,Question
		,QuestionText
		,QuestionName
		,DisplayOrder
		,DefaultShow
		,TotalRows
	) select * from #ResultSet'

	IF (@WhereClause <> '')
	BEGIN
		SET @sql = @sql + ' where ' + @WhereClause
	END
	
	IF (@OrderClause <> '')
	BEGIN
		SET @sql = @sql + ' order by ' + @OrderClause
	END

	EXEC (@sql)
	--print @sql

	/* sort out total row count */
	DECLARE @count INT

	SET @count = (
			SELECT COUNT(PageQuestionID)
			FROM #ResultSetIndexed
			)

	UPDATE #ResultSetIndexed
	SET TotalRows = @count

	declare @startIndex int
	declare @endIndex int

	IF (@CurrentPageIndex = 1)
	BEGIN
		
		set @startIndex = 0
		set @endIndex = @startIndex + @PageSize + 1
	END
	ELSE
	BEGIN
		set @startIndex = (@CurrentPageIndex-1) * @PageSize
		set @endIndex = @startIndex + @PageSize + 1 
	END

	SELECT 	PageQuestionID	
			,Question
			,QuestionText
			,QuestionName
			,DisplayOrder
			,DefaultShow
			,TotalRows
	FROM #ResultSetIndexed
	WHERE ID > @startIndex 
	AND ID < @endIndex	



END
GO
PRINT N'Creating [dbo].[PageQuestions_ListPageQuestionValidationForGrid]...';


GO
CREATE PROCEDURE [dbo].[PageQuestions_ListPageQuestionValidationForGrid] 
	@PageQuestionID INT,
	@WhereClause NVARCHAR(max),
	@OrderClause NVARCHAR(128),
	@PageSize INT,
	@CurrentPageIndex INT
AS
BEGIN

	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			CAST(null as int)	as PageQuestionValidationID			
			,cast(null as nvarchar(1024))   as ValidationMessage
			,cast(null as nvarchar(100))   as ValidationType
			,CAST(null as int)	as TotalRows
		WHERE
			1 = 2  
	END	

	IF OBJECT_ID('tempdb..#ResultSet') IS NOT NULL
			DROP TABLE #ResultSet

	IF OBJECT_ID('tempdb..#ResultSetIndexed') IS NOT NULL
		DROP TABLE #ResultSetIndexed

	CREATE TABLE #ResultSet (
		PageQuestionValidationID INT			
		,ValidationMessage nvarchar(1024)
		,ValidationType nvarchar(100)
		,TotalRows INT
		)

	CREATE TABLE #ResultSetIndexed (
		ID INT IDENTITY(1, 1)
		,PageQuestionValidationID INT			
		,ValidationMessage nvarchar(1024)
		,ValidationType nvarchar(100)
		,TotalRows INT
		)	
		
		
	/* get raw data */
	INSERT INTO #ResultSet (
					PageQuestionValidationID	
					,ValidationMessage
					,ValidationType
					,TotalRows
		)	
	SELECT distinct pqv.Page_Question_Validation_ID AS PageQuestionValidationID
		,pqv.ErrorMessage
		,vt.Name
		,0
	FROM Page_Question_Validation pqv
	JOIN Validation_Type vt ON vt.Validation_Type_ID = pqv.Validation_Type_ID
	WHERE pqv.Page_Question_ID = @PageQuestionID
	ORDER BY pqv.ErrorMessage

	
	DECLARE @sql NVARCHAR(max)

	SET @sql = 'INSERT INTO #ResultSetIndexed
	(
		PageQuestionValidationID	
		,ValidationMessage
		,ValidationType
		,TotalRows
	) select * from #ResultSet'

	IF (@WhereClause <> '')
	BEGIN
		SET @sql = @sql + ' where ' + @WhereClause
	END
	
	IF (@OrderClause <> '')
	BEGIN
		SET @sql = @sql + ' order by ' + @OrderClause
	END

	EXEC (@sql)
	--print @sql

	/* sort out total row count */
	DECLARE @count INT

	SET @count = (
			SELECT COUNT(PageQuestionValidationID)
			FROM #ResultSetIndexed
			)

	UPDATE #ResultSetIndexed
	SET TotalRows = @count

	declare @startIndex int
	declare @endIndex int

	IF (@CurrentPageIndex = 1)
	BEGIN
		
		set @startIndex = 0
		set @endIndex = @startIndex + @PageSize + 1
	END
	ELSE
	BEGIN
		set @startIndex = (@CurrentPageIndex-1) * @PageSize
		set @endIndex = @startIndex + @PageSize + 1 
	END

	SELECT 	PageQuestionValidationID	
			,ValidationMessage
			,ValidationType
			,TotalRows
	FROM #ResultSetIndexed
	WHERE ID > @startIndex 
	AND ID < @endIndex	



END
GO
PRINT N'Creating [dbo].[Pages_ListPagesForGrid]...';


GO
CREATE PROCEDURE [dbo].[Pages_ListPagesForGrid] 
	@SchemeID INT,
	@WhereClause NVARCHAR(max),
	@OrderClause NVARCHAR(128),
	@PageSize INT,
	@CurrentPageIndex INT
AS
BEGIN

	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			CAST(null as int)	as PageID
			,cast(null as nvarchar(100))   as PageTemplate
			,cast(null as nvarchar(50))   as [Name]
			,cast(null as nvarchar(50))   as [Title]
			,cast(null as int)   as DisplayOrder
			,cast(null as nvarchar(50))   as NextPageName
			,CAST(null as int)	as TotalRows
		WHERE
			1 = 2  
	END	

	IF OBJECT_ID('tempdb..#ResultSet') IS NOT NULL
			DROP TABLE #ResultSet

	IF OBJECT_ID('tempdb..#ResultSetIndexed') IS NOT NULL
		DROP TABLE #ResultSetIndexed

	CREATE TABLE #ResultSet (
		PageID INT		
		,PageTemplate nvarchar(100)		
		,[Name] nvarchar(50)
		,[Title] nvarchar(50)
		,DisplayOrder int
		,NextPageName nvarchar(50)
		,TotalRows INT
		)

	CREATE TABLE #ResultSetIndexed (
		ID INT IDENTITY(1, 1)
		,PageID INT		
		,PageTemplate nvarchar(100)		
		,[Name] nvarchar(50)
		,[Title] nvarchar(50)
		,DisplayOrder int
		,NextPageName nvarchar(50)
		,TotalRows INT
		)	
		
		
	/* get raw data */
	INSERT INTO #ResultSet (
					PageID	
					,PageTemplate		
					,[Name]
					,[Title]
					,DisplayOrder
					,NextPageName
					,TotalRows
		)	
	SELECT distinct p.Page_ID AS PageID
		,pt.NAME AS PageTemplate
		,p.NAME
		,p.Title
		,p.DisplayOrder
		,isnull(nextP.NAME, 'n/a') AS NextPageName
		,0
	FROM Page p
	JOIN Page_Template pt ON pt.Page_Template_ID = p.Page_Template_ID
	LEFT JOIN Page nextP ON p.Next_Page_ID = nextp.Page_ID
	WHERE p.Scheme_ID = @SchemeID
	ORDER BY p.DisplayOrder

	
	DECLARE @sql NVARCHAR(max)

	SET @sql = 'INSERT INTO #ResultSetIndexed
	(
		PageID	
		,PageTemplate		
		,[Name]
		,[Title]
		,DisplayOrder
		,NextPageName
		,TotalRows  
	) select * from #ResultSet'

	IF (@WhereClause <> '')
	BEGIN
		SET @sql = @sql + ' where ' + @WhereClause
	END
	
	IF (@OrderClause <> '')
	BEGIN
		SET @sql = @sql + ' order by ' + @OrderClause
	END

	EXEC (@sql)
	--print @sql

	/* sort out total row count */
	DECLARE @count INT

	SET @count = (
			SELECT COUNT(PageID)
			FROM #ResultSetIndexed
			)

	UPDATE #ResultSetIndexed
	SET TotalRows = @count

	declare @startIndex int
	declare @endIndex int

	IF (@CurrentPageIndex = 1)
	BEGIN
		
		set @startIndex = 0
		set @endIndex = @startIndex + @PageSize + 1
	END
	ELSE
	BEGIN
		set @startIndex = (@CurrentPageIndex-1) * @PageSize
		set @endIndex = @startIndex + @PageSize + 1 
	END

	SELECT 	PageID	
			,PageTemplate		
			,[Name]
			,[Title]
			,DisplayOrder
			,NextPageName
			,TotalRows 
	FROM #ResultSetIndexed
	WHERE ID > @startIndex 
	AND ID < @endIndex	



END
GO
PRINT N'Creating [dbo].[Questions_ListPossibleAnswerForGrid]...';


GO
create PROCEDURE [dbo].[Questions_ListPossibleAnswerForGrid] 
	@QuestionID INT,
	@WhereClause NVARCHAR(max),
	@OrderClause NVARCHAR(128),
	@PageSize INT,
	@CurrentPageIndex INT
AS
BEGIN

	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			CAST(null as int)	as PossibleAnswerID			
			,cast(null as nvarchar(50))   as AnswerText
			,cast(null as nvarchar(20))   as AnswerValue
			,CAST(null as int)	as DisplayOrder
			,CAST(null as int)	as TotalRows
		WHERE
			1 = 2  
	END	

	IF OBJECT_ID('tempdb..#ResultSet') IS NOT NULL
			DROP TABLE #ResultSet

	IF OBJECT_ID('tempdb..#ResultSetIndexed') IS NOT NULL
		DROP TABLE #ResultSetIndexed

	CREATE TABLE #ResultSet (
		PossibleAnswerID INT			
		,AnswerText nvarchar(50)
		,AnswerValue nvarchar(20)
		,DisplayOrder int
		,TotalRows INT
		)

	CREATE TABLE #ResultSetIndexed (
		ID INT IDENTITY(1, 1)
		,PossibleAnswerID INT			
		,AnswerText nvarchar(50)
		,AnswerValue nvarchar(20)
		,DisplayOrder int
		,TotalRows INT
		)	
		
		
	/* get raw data */
	INSERT INTO #ResultSet (
					PossibleAnswerID	
					,AnswerText
					,AnswerValue
					,DisplayOrder
					,TotalRows
		)	
	SELECT distinct Question_Possible_Answer_ID
		,AnswerText
		,AnswerValue
		,DisplayOrder
		,0
	FROM Question_Possible_Answer
	WHERE Question_ID = @QuestionID
	ORDER BY DisplayOrder

	
	DECLARE @sql NVARCHAR(max)

	SET @sql = 'INSERT INTO #ResultSetIndexed
	(
		PossibleAnswerID	
		,AnswerText
		,AnswerValue
		,DisplayOrder
		,TotalRows
	) select * from #ResultSet'

	IF (@WhereClause <> '')
	BEGIN
		SET @sql = @sql + ' where ' + @WhereClause
	END
	
	IF (@OrderClause <> '')
	BEGIN
		SET @sql = @sql + ' order by ' + @OrderClause
	END

	EXEC (@sql)
	--print @sql

	/* sort out total row count */
	DECLARE @count INT

	SET @count = (
			SELECT COUNT(PossibleAnswerID)
			FROM #ResultSetIndexed
			)

	UPDATE #ResultSetIndexed
	SET TotalRows = @count

	declare @startIndex int
	declare @endIndex int

	IF (@CurrentPageIndex = 1)
	BEGIN
		
		set @startIndex = 0
		set @endIndex = @startIndex + @PageSize + 1
	END
	ELSE
	BEGIN
		set @startIndex = (@CurrentPageIndex-1) * @PageSize
		set @endIndex = @startIndex + @PageSize + 1 
	END

	SELECT 	PossibleAnswerID	
			,AnswerText
			,AnswerValue
			,DisplayOrder
			,TotalRows
	FROM #ResultSetIndexed
	WHERE ID > @startIndex 
	AND ID < @endIndex	



END
GO
PRINT N'Creating [dbo].[Questions_ListQuestionsForGrid]...';


GO
CREATE PROCEDURE [dbo].[Questions_ListQuestionsForGrid] 
	@SchemeID INT,
	@WhereClause NVARCHAR(max),
	@OrderClause NVARCHAR(128),
	@PageSize INT,
	@CurrentPageIndex INT
AS
BEGIN

	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			CAST(null as int)	as QuestionID
			,cast(null as nvarchar(100))   as QuestionTemplate
			,cast(null as nvarchar(50))   as [Name]
			,cast(null as nvarchar(50))   as [Code]
			,CAST(null as int)	as TotalRows
		WHERE
			1 = 2  
	END	

	IF OBJECT_ID('tempdb..#ResultSet') IS NOT NULL
			DROP TABLE #ResultSet

	IF OBJECT_ID('tempdb..#ResultSetIndexed') IS NOT NULL
		DROP TABLE #ResultSetIndexed

	CREATE TABLE #ResultSet (
		QuestionID INT		
		,QuestionTemplate nvarchar(100)		
		,[Name] nvarchar(50)
		,[Code] nvarchar(50)
		,TotalRows INT
		)

	CREATE TABLE #ResultSetIndexed (
		ID INT IDENTITY(1, 1)
		,QuestionID INT		
		,QuestionTemplate nvarchar(100)		
		,[Name] nvarchar(50)
		,[Code] nvarchar(50)
		,TotalRows INT
		)	
		
		
	/* get raw data */
	INSERT INTO #ResultSet (
					QuestionID	
					,QuestionTemplate		
					,[Name]
					,[Code]
					,TotalRows
		)	
	SELECT distinct q.Question_ID AS QuestionID
		,qt.Name AS QuestionTemplate
		,q.Name
		,q.Code
		,0
	FROM Question q
	JOIN Question_Template qt ON qt.Question_Template_ID = q.Question_Template_ID
	WHERE q.Scheme_ID = @SchemeID
	ORDER BY q.Name

	
	DECLARE @sql NVARCHAR(max)

	SET @sql = 'INSERT INTO #ResultSetIndexed
	(
		QuestionID	
		,QuestionTemplate		
		,[Name]
		,[Code]
		,TotalRows  
	) select * from #ResultSet'

	IF (@WhereClause <> '')
	BEGIN
		SET @sql = @sql + ' where ' + @WhereClause
	END
	
	IF (@OrderClause <> '')
	BEGIN
		SET @sql = @sql + ' order by ' + @OrderClause
	END

	EXEC (@sql)
	--print @sql

	/* sort out total row count */
	DECLARE @count INT

	SET @count = (
			SELECT COUNT(QuestionID)
			FROM #ResultSetIndexed
			)

	UPDATE #ResultSetIndexed
	SET TotalRows = @count

	declare @startIndex int
	declare @endIndex int

	IF (@CurrentPageIndex = 1)
	BEGIN
		
		set @startIndex = 0
		set @endIndex = @startIndex + @PageSize + 1
	END
	ELSE
	BEGIN
		set @startIndex = (@CurrentPageIndex-1) * @PageSize
		set @endIndex = @startIndex + @PageSize + 1 
	END

	SELECT 	QuestionID	
			,QuestionTemplate		
			,[Name]
			,[Code]
			,TotalRows 
	FROM #ResultSetIndexed
	WHERE ID > @startIndex 
	AND ID < @endIndex	



END
GO
PRINT N'Creating [dbo].[RenderedPages_ListRenderedPagesForGrid]...';


GO
create PROCEDURE [dbo].[RenderedPages_ListRenderedPagesForGrid] 
	@SchemeID INT,
	@WhereClause NVARCHAR(max),
	@OrderClause NVARCHAR(128),
	@PageSize INT,
	@CurrentPageIndex INT
AS
BEGIN

	--supplying a data contract
	IF 1 = 2 BEGIN
		SELECT
			CAST(null as int)	as RenderedPageID			
			,cast(null as nvarchar(50))   as [Name]
			,cast(null as nvarchar(50))   as [Title]
			,cast(null as datetime)   as LastRenderDate
			,CAST(null as int)	as TotalRows
		WHERE
			1 = 2  
	END	

	IF OBJECT_ID('tempdb..#ResultSet') IS NOT NULL
			DROP TABLE #ResultSet

	IF OBJECT_ID('tempdb..#ResultSetIndexed') IS NOT NULL
		DROP TABLE #ResultSetIndexed

	CREATE TABLE #ResultSet (
		RenderedPageID INT			
		,[Name] nvarchar(50)
		,[Title] nvarchar(50)
		,LastRenderDate datetime
		,TotalRows INT
		)

	CREATE TABLE #ResultSetIndexed (
		ID INT IDENTITY(1, 1)
		,RenderedPageID INT		
		,[Name] nvarchar(50)
		,[Title] nvarchar(50)
		,LastRenderDate datetime
		,TotalRows INT
		)	
		
		
	/* get raw data */
	INSERT INTO #ResultSet (
					RenderedPageID	
					,[Name]
					,[Title]
					,LastRenderDate
					,TotalRows
		)	
	SELECT distinct rp.Rendered_Page_ID AS RenderedPageID
		,p.Name
		,p.Title
		,rp.LastRenderDate
		,0
	FROM Rendered_Page rp
	JOIN [Page] p ON p.Page_ID = rp.Page_ID
	WHERE p.Scheme_ID = @SchemeID
	ORDER BY p.Name

	
	DECLARE @sql NVARCHAR(max)

	SET @sql = 'INSERT INTO #ResultSetIndexed
	(
		RenderedPageID	
		,[Name]
		,[Title]
		,LastRenderDate
		,TotalRows  
	) select * from #ResultSet'

	IF (@WhereClause <> '')
	BEGIN
		SET @sql = @sql + ' where ' + @WhereClause
	END
	
	IF (@OrderClause <> '')
	BEGIN
		SET @sql = @sql + ' order by ' + @OrderClause
	END

	EXEC (@sql)
	--print @sql

	/* sort out total row count */
	DECLARE @count INT

	SET @count = (
			SELECT COUNT(RenderedPageID)
			FROM #ResultSetIndexed
			)

	UPDATE #ResultSetIndexed
	SET TotalRows = @count

	declare @startIndex int
	declare @endIndex int

	IF (@CurrentPageIndex = 1)
	BEGIN
		
		set @startIndex = 0
		set @endIndex = @startIndex + @PageSize + 1
	END
	ELSE
	BEGIN
		set @startIndex = (@CurrentPageIndex-1) * @PageSize
		set @endIndex = @startIndex + @PageSize + 1 
	END

	SELECT 	RenderedPageID	
			,[Name]
			,[Title]
			,LastRenderDate
			,TotalRows 
	FROM #ResultSetIndexed
	WHERE ID > @startIndex 
	AND ID < @endIndex	



END
GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Page] WITH CHECK CHECK CONSTRAINT [FK_Page_Page];

ALTER TABLE [dbo].[Page] WITH CHECK CHECK CONSTRAINT [FK_Page_Page_Template];

ALTER TABLE [dbo].[Page] WITH CHECK CHECK CONSTRAINT [FK_Page_Scheme];

ALTER TABLE [dbo].[Page_Question] WITH CHECK CHECK CONSTRAINT [FK_Page_Question_Page];

ALTER TABLE [dbo].[Page_Question] WITH CHECK CHECK CONSTRAINT [FK_Page_Question_Question];

ALTER TABLE [dbo].[Page_Question_Conditional_Display] WITH CHECK CHECK CONSTRAINT [FK_Page_Question_Conditional_Display_Page_Question];

ALTER TABLE [dbo].[Page_Question_Conditional_Display] WITH CHECK CHECK CONSTRAINT [FK_Page_Question_Conditional_Display_Page_Question1];

ALTER TABLE [dbo].[Page_Question_Conditional_Display] WITH CHECK CHECK CONSTRAINT [FK_Page_Question_Conditional_Display_Question_Possible_Answer];

ALTER TABLE [dbo].[Page_Question_Validation] WITH CHECK CHECK CONSTRAINT [FK_Page_Question_Validation_Page_Question];

ALTER TABLE [dbo].[Page_Question_Validation] WITH CHECK CHECK CONSTRAINT [FK_Page_Question_Validation_Validation_Type];

ALTER TABLE [dbo].[Question] WITH CHECK CHECK CONSTRAINT [FK_Question_Question_Template];

ALTER TABLE [dbo].[Question] WITH CHECK CHECK CONSTRAINT [FK_Question_Scheme];

ALTER TABLE [dbo].[Question_Possible_Answer] WITH CHECK CHECK CONSTRAINT [FK_Question_Possible_Answer_Question];

ALTER TABLE [dbo].[Question_Template] WITH CHECK CHECK CONSTRAINT [FK_Question_Template_Question_Type];

ALTER TABLE [dbo].[Quote] WITH CHECK CHECK CONSTRAINT [FK_Quote_Scheme];

ALTER TABLE [dbo].[Quote_Question_Answer] WITH CHECK CHECK CONSTRAINT [FK_Quote_Question_Answer_Question];

ALTER TABLE [dbo].[Quote_Question_Answer] WITH CHECK CHECK CONSTRAINT [FK_Quote_Question_Answer_Question_Possible_Answer];

ALTER TABLE [dbo].[Quote_Question_Answer] WITH CHECK CHECK CONSTRAINT [FK_Quote_Question_Answer_Quote];

ALTER TABLE [dbo].[Rendered_Page] WITH CHECK CHECK CONSTRAINT [FK_Rendered_Page_Page];


GO
PRINT N'Update complete.';


GO
